name: CI & Publish

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      publish_pypi:
        description: "Also publish build to PyPI?"
        required: false
        default: "false"

permissions:
  contents: read
  id-token: write  # Needed for OIDC (PyPI Trusted Publishing)

env:
  POETRY_VERSION: 1.8.3
  PYTHONUNBUFFERED: "1"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install "poetry==${POETRY_VERSION}"

      - name: Cache Poetry virtualenvs
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Lint (ruff)
        run: |
          poetry run ruff check .

      - name: Type check (mypy)
        run: |
          poetry run mypy .

      - name: Tests (pytest)
        run: |
          poetry run pytest -q

  build_and_publish:
    name: Build & Publish
    # Use GitHub Environment 'pypi' (configure in repo settings for protections & secrets)
    environment:
      name: pypi
      url: https://pypi.org/project/ib-mcp/
    needs: [test]
    runs-on: ubuntu-latest
    if: >-
      startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_pypi == 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install "poetry==${POETRY_VERSION}"

      - name: Verify tag matches project version
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -euo pipefail
          version=$(grep -Po '^version\s*=\s*"\K[^"]+' pyproject.toml)
          tag="$GITHUB_REF_NAME"
          if [ "$tag" != "v$version" ]; then
            echo "Tag $tag does not match project version $version (expected v$version)" >&2
            exit 1
          fi
          echo "Version check passed: $tag matches pyproject version $version"

      - name: Install deps (no dev)
        run: |
          poetry install --only main --no-interaction --no-root

      - name: Build artifacts
        run: |
          poetry build
          ls -l dist

      - name: Publish to PyPI (Trusted Publishing)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          attestations: true

      - name: Upload dist artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
